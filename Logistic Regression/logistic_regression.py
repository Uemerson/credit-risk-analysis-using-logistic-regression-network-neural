# -*- coding: utf-8 -*-
"""logistic regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XtrZLb34KYCB_xnMQWmzirJenyVdHD00
"""

!pip install pandas
!pip install numpy
!pip install matplotlib
!pip install seaborn

from google.colab import drive
drive.mount('/content/gdrive')

import pandas as pd, numpy as np
from sklearn.linear_model import LogisticRegression
from sklearn import metrics 
from sklearn.metrics import confusion_matrix
from sklearn.metrics import classification_report

path_input = '/content/gdrive/My Drive/Colab Notebooks/dataset/Credit Approval Data Set - UCI Machine Learning/crx_manipulation_with_index.csv'
path_output = '/content/gdrive/My Drive/Colab Notebooks/dataset/Credit Approval Data Set - UCI Machine Learning/logistic_regression_confusion_matrix.csv'

df = pd.read_csv(path_input)

# Replacing unknown values ​​with np.NaN and remove columns with missing data
dataset_cleaned = df.replace('?',np.NaN)
dataset_cleaned.dropna(inplace=True)

# Converting columns to float and removing Unnamed column
dataset_cleaned['A1'] = pd.to_numeric(dataset_cleaned['A1'])
dataset_cleaned['A2'] = pd.to_numeric(dataset_cleaned['A2'])
dataset_cleaned['A14'] = pd.to_numeric(dataset_cleaned['A14'])

dataset_cleaned.drop('Unnamed: 0',axis=1,inplace=True)

# df.head(5)

# Separation of X's and Y's and normalization
X = dataset_cleaned.drop(['A16'],axis=1)
Y = dataset_cleaned['A16']

# Division of training and test data
# 30% for testing and 70% for training

testing_size = 0.3
from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(X, Y,
                                                    test_size = testing_size)

print(Y)

# Training model
logisticRegr = LogisticRegression(max_iter=1900)
logisticRegr.fit(X_train, Y_train)                                              # Training our model

predictions = logisticRegr.predict(X_test)

accuracy = metrics.accuracy_score(Y_test, predictions)
accuracy_percentage = 100 * accuracy
accuracy_percentage

print("Exatidão (Accuracy): {0:.4f}".format(metrics.accuracy_score(Y_test, predictions)))
print(classification_report(Y_test, predictions))

#######################Binarizar todos os resultados em 0e 1##################

for i in range(len(predictions)):
    if predictions[i] >= 0.5:
        predictions[i] = 1
    else:
        predictions[i] = 0

###########################Análise das matrizes de confusão####################


Result = pd.DataFrame(confusion_matrix(Y_test, predictions))
Result.to_csv(path_output)
Classification = classification_report(Y_test, predictions)